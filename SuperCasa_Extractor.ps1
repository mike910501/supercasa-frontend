# ===================================================================
# SUPERCASA - EXTRACTOR DE DOCUMENTACI√ìN COMPLETO
# ===================================================================
# Este script extrae TODA la informaci√≥n relevante del proyecto SuperCasa
# Frontend (React) + Backend (Node.js) + Configuraciones + Despliegues
# RUTAS FIJAS CONFIGURADAS PARA TU PROYECTO
# ===================================================================

# CONFIGURACI√ìN FIJA - RUTAS DE TU PROYECTO SUPERCASA
$FrontendPath = "C:\Users\mikeh\Documents\supercasa-admin\supercasa-admin"
$BackendPath = "C:\Users\mikeh\Documents\supercasa-backend\supercasa-backend"
$OutputPath = "C:\Users\mikeh\Documents\SuperCasa_Documentation_$(Get-Date -Format 'yyyyMMdd_HHmmss')"

Write-Host "üöÄ INICIANDO EXTRACCI√ìN SUPERCASA..." -ForegroundColor Green
Write-Host "üé® Frontend: $FrontendPath" -ForegroundColor Yellow
Write-Host "‚öôÔ∏è Backend: $BackendPath" -ForegroundColor Yellow
Write-Host "üìÅ Documentaci√≥n: $OutputPath" -ForegroundColor Cyan

# Verificar que existen las rutas
if (-not (Test-Path $FrontendPath)) {
    Write-Host "‚ùå ERROR: No se encuentra el frontend en $FrontendPath" -ForegroundColor Red
    exit 1
}

if (-not (Test-Path $BackendPath)) {
    Write-Host "‚ùå ERROR: No se encuentra el backend en $BackendPath" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Ambos proyectos encontrados correctamente" -ForegroundColor Green

# Crear directorio de salida
New-Item -ItemType Directory -Path $OutputPath -Force | Out-Null
Write-Host "üìÅ Creando documentaci√≥n en: $OutputPath" -ForegroundColor Green

# ===================================================================
# FUNCIONES AUXILIARES
# ===================================================================

function Write-Section {
    param([string]$Title, [string]$Content, [string]$FileName)
    
    $filePath = Join-Path $OutputPath $FileName
    $separator = "=" * 80
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    $output = @"
$separator
$Title
Extra√≠do el: $timestamp
$separator

$Content

"@
    
    Add-Content -Path $filePath -Value $output -Encoding UTF8
    Write-Host "‚úÖ $Title extra√≠do" -ForegroundColor Cyan
}

function Get-FileContent {
    param([string]$Path, [string]$Pattern = "*")
    
    if (Test-Path $Path) {
        Get-ChildItem -Path $Path -Filter $Pattern -Recurse | 
        Where-Object { -not $_.PSIsContainer } |
        ForEach-Object {
            "ARCHIVO: $($_.FullName.Replace($PWD.Path, '.'))"
            "=" * 60
            Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue
            "`n`n"
        }
    } else {
        "‚ùå Ruta no encontrada: $Path"
    }
}

function Get-DirectoryStructure {
    param([string]$Path, [string]$Title)
    
    if (Test-Path $Path) {
        $structure = tree $Path /F /A
        "$Title`n$('=' * 60)`n$($structure -join "`n")`n`n"
    } else {
        "‚ùå Directorio no encontrado: $Path`n"
    }
}

# ===================================================================
# 1. INFORMACI√ìN GENERAL DEL PROYECTO
# ===================================================================

$generalInfo = @"
PROYECTO: SuperCasa
DESCRIPCI√ìN: Supermercado virtual con entrega ultra r√°pida
UBICACI√ìN: Torres de Bellavista, Bogot√° D.C., Colombia
TECNOLOG√çAS: React + Node.js + PostgreSQL + WhatsApp Business API + WOMPI

ESTRUCTURA DEL PROYECTO:
- Frontend (React): $FrontendPath
- Backend (Node.js): $BackendPath
- Documentaci√≥n generada: $OutputPath

VERIFICACI√ìN DE RUTAS:
- Frontend accesible: $(Test-Path $FrontendPath)
- Backend accesible: $(Test-Path $BackendPath)

CONFIGURACI√ìN:
- Proyectos separados en carpetas independientes
- Frontend: supercasa-admin (React + Tailwind)
- Backend: supercasa-backend (Node.js + Express + PostgreSQL)

FECHA DE EXTRACCI√ìN: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
"@

Write-Section "INFORMACI√ìN GENERAL" $generalInfo "01_INFORMACION_GENERAL.md"

# ===================================================================
# 2. FRONTEND (REACT) - AN√ÅLISIS COMPLETO
# ===================================================================

Write-Host "`nüé® Analizando FRONTEND..." -ForegroundColor Yellow

# Estructura del frontend
$frontendStructure = Get-DirectoryStructure $FrontendPath "ESTRUCTURA DEL FRONTEND"
Write-Section "FRONTEND - ESTRUCTURA" $frontendStructure "02_FRONTEND_ESTRUCTURA.md"

# Package.json y dependencias
$frontendPackage = Get-FileContent (Join-Path $FrontendPath "package.json")
Write-Section "FRONTEND - PACKAGE.JSON Y DEPENDENCIAS" $frontendPackage "03_FRONTEND_DEPENDENCIAS.md"

# Archivos de configuraci√≥n principales
$frontendConfigs = @()
$configFiles = @("package-lock.json", "yarn.lock", ".gitignore", "README.md", "netlify.toml", "public/manifest.json", "public/index.html")

foreach ($configFile in $configFiles) {
    $configPath = Join-Path $FrontendPath $configFile
    if (Test-Path $configPath) {
        $frontendConfigs += "ARCHIVO: $configFile"
        $frontendConfigs += "=" * 60
        $frontendConfigs += Get-Content $configPath -Raw -ErrorAction SilentlyContinue
        $frontendConfigs += "`n`n"
    }
}

Write-Section "FRONTEND - CONFIGURACIONES" ($frontendConfigs -join "`n") "04_FRONTEND_CONFIGURACIONES.md"

# Componentes React principales
$frontendComponents = Get-FileContent (Join-Path $FrontendPath "src") "*.jsx"
Write-Section "FRONTEND - COMPONENTES JSX" $frontendComponents "05_FRONTEND_COMPONENTES_JSX.md"

$frontendComponentsJS = Get-FileContent (Join-Path $FrontendPath "src") "*.js"
Write-Section "FRONTEND - COMPONENTES JS" $frontendComponentsJS "06_FRONTEND_COMPONENTES_JS.md"

# Estilos y CSS
$frontendStyles = Get-FileContent (Join-Path $FrontendPath "src") "*.css"
Write-Section "FRONTEND - ESTILOS CSS" $frontendStyles "07_FRONTEND_ESTILOS.md"

# Archivos de configuraci√≥n adicionales
$frontendOtherConfigs = @()
$otherConfigFiles = @("tailwind.config.js", "craco.config.js", "webpack.config.js", ".env.example", ".env.local")

foreach ($configFile in $otherConfigFiles) {
    $configPath = Join-Path $FrontendPath $configFile
    if (Test-Path $configPath) {
        $frontendOtherConfigs += "ARCHIVO: $configFile"
        $frontendOtherConfigs += "=" * 60
        $frontendOtherConfigs += Get-Content $configPath -Raw -ErrorAction SilentlyContinue
        $frontendOtherConfigs += "`n`n"
    }
}

Write-Section "FRONTEND - CONFIGURACIONES ADICIONALES" ($frontendOtherConfigs -join "`n") "08_FRONTEND_CONFIGS_ADICIONALES.md"

# ===================================================================
# 3. BACKEND (NODE.JS) - AN√ÅLISIS COMPLETO
# ===================================================================

Write-Host "`n‚öôÔ∏è Analizando BACKEND..." -ForegroundColor Yellow

# Estructura del backend
$backendStructure = Get-DirectoryStructure $BackendPath "ESTRUCTURA DEL BACKEND"
Write-Section "BACKEND - ESTRUCTURA" $backendStructure "09_BACKEND_ESTRUCTURA.md"

# Package.json del backend
$backendPackage = Get-FileContent (Join-Path $BackendPath "package.json")
Write-Section "BACKEND - PACKAGE.JSON Y DEPENDENCIAS" $backendPackage "10_BACKEND_DEPENDENCIAS.md"

# Archivo principal del servidor
$backendMain = @()
$mainFiles = @("index.js", "server.js", "app.js", "main.js")

foreach ($mainFile in $mainFiles) {
    $mainPath = Join-Path $BackendPath $mainFile
    if (Test-Path $mainPath) {
        $backendMain += "ARCHIVO PRINCIPAL: $mainFile"
        $backendMain += "=" * 60
        $backendMain += Get-Content $mainPath -Raw -ErrorAction SilentlyContinue
        $backendMain += "`n`n"
    }
}

Write-Section "BACKEND - SERVIDOR PRINCIPAL" ($backendMain -join "`n") "11_BACKEND_SERVIDOR.md"

# Rutas y APIs
$backendRoutes = Get-FileContent (Join-Path $BackendPath "routes") "*.js"
if (-not $backendRoutes) {
    $backendRoutes = Get-FileContent (Join-Path $BackendPath "src/routes") "*.js"
}
if (-not $backendRoutes) {
    $backendRoutes = Get-FileContent $BackendPath "*route*.js"
}
Write-Section "BACKEND - RUTAS Y APIS" $backendRoutes "12_BACKEND_RUTAS.md"

# Controladores
$backendControllers = Get-FileContent (Join-Path $BackendPath "controllers") "*.js"
if (-not $backendControllers) {
    $backendControllers = Get-FileContent (Join-Path $BackendPath "src/controllers") "*.js"
}
Write-Section "BACKEND - CONTROLADORES" $backendControllers "13_BACKEND_CONTROLADORES.md"

# Modelos y base de datos
$backendModels = Get-FileContent (Join-Path $BackendPath "models") "*.js"
if (-not $backendModels) {
    $backendModels = Get-FileContent (Join-Path $BackendPath "src/models") "*.js"
}
Write-Section "BACKEND - MODELOS DE BASE DE DATOS" $backendModels "14_BACKEND_MODELOS.md"

# Middlewares
$backendMiddlewares = Get-FileContent (Join-Path $BackendPath "middleware") "*.js"
if (-not $backendMiddlewares) {
    $backendMiddlewares = Get-FileContent (Join-Path $BackendPath "src/middleware") "*.js"
}
Write-Section "BACKEND - MIDDLEWARES" $backendMiddlewares "15_BACKEND_MIDDLEWARES.md"

# Utilidades y helpers
$backendUtils = Get-FileContent (Join-Path $BackendPath "utils") "*.js"
if (-not $backendUtils) {
    $backendUtils = Get-FileContent (Join-Path $BackendPath "src/utils") "*.js"
}
if (-not $backendUtils) {
    $backendUtils = Get-FileContent (Join-Path $BackendPath "helpers") "*.js"
}
Write-Section "BACKEND - UTILIDADES Y HELPERS" $backendUtils "16_BACKEND_UTILS.md"

# Configuraciones del backend
$backendConfigs = @()
$backendConfigFiles = @(".env.example", ".gitignore", "README.md", "render.yaml", "Procfile", "vercel.json")

foreach ($configFile in $backendConfigFiles) {
    $configPath = Join-Path $BackendPath $configFile
    if (Test-Path $configPath) {
        $backendConfigs += "ARCHIVO: $configFile"
        $backendConfigs += "=" * 60
        $backendConfigs += Get-Content $configPath -Raw -ErrorAction SilentlyContinue
        $backendConfigs += "`n`n"
    }
}

Write-Section "BACKEND - CONFIGURACIONES" ($backendConfigs -join "`n") "17_BACKEND_CONFIGURACIONES.md"

# ===================================================================
# 4. ESQUEMAS DE BASE DE DATOS
# ===================================================================

Write-Host "`nüóÑÔ∏è Buscando esquemas de base de datos..." -ForegroundColor Yellow

$dbSchemas = @()

# Buscar archivos SQL
$sqlFiles = @(
    (Join-Path $BackendPath "*.sql"),
    (Join-Path $BackendPath "database/*.sql"),
    (Join-Path $BackendPath "db/*.sql"),
    (Join-Path $BackendPath "migrations/*.sql"),
    (Join-Path $BackendPath "schema/*.sql")
)

foreach ($sqlPattern in $sqlFiles) {
    if (Test-Path $sqlPattern) {
        Get-ChildItem $sqlPattern | ForEach-Object {
            $dbSchemas += "ARCHIVO SQL: $($_.Name)"
            $dbSchemas += "=" * 60
            $dbSchemas += Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue
            $dbSchemas += "`n`n"
        }
    }
}

# Buscar archivos de migraci√≥n
$migrationFiles = Get-FileContent (Join-Path $BackendPath "migrations") "*"
if ($migrationFiles) {
    $dbSchemas += "MIGRACIONES:"
    $dbSchemas += "=" * 60
    $dbSchemas += $migrationFiles
}

Write-Section "BASE DE DATOS - ESQUEMAS Y MIGRACIONES" ($dbSchemas -join "`n") "18_BASE_DATOS_ESQUEMAS.md"

# ===================================================================
# 5. DOCUMENTACI√ìN EXISTENTE
# ===================================================================

Write-Host "`nüìö Extrayendo documentaci√≥n existente..." -ForegroundColor Yellow

$existingDocs = @()

# README files
$readmeFiles = @(
    (Join-Path $FrontendPath "README.md"),
    (Join-Path $BackendPath "README.md"),
    (Join-Path $FrontendPath "docs/*.md"),
    (Join-Path $BackendPath "docs/*.md")
)

foreach ($readmePattern in $readmeFiles) {
    if (Test-Path $readmePattern) {
        Get-ChildItem $readmePattern | ForEach-Object {
            $existingDocs += "DOCUMENTACI√ìN: $($_.FullName.Replace($PWD.Path, '.'))"
            $existingDocs += "=" * 60
            $existingDocs += Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue
            $existingDocs += "`n`n"
        }
    }
}

Write-Section "DOCUMENTACI√ìN EXISTENTE" ($existingDocs -join "`n") "19_DOCUMENTACION_EXISTENTE.md"

# ===================================================================
# 6. CONFIGURACIONES DE DESPLIEGUE
# ===================================================================

Write-Host "`nüöÄ Extrayendo configuraciones de despliegue..." -ForegroundColor Yellow

$deploymentConfigs = @()

# Frontend deployment (Netlify, Vercel, etc.)
$frontendDeployFiles = @("netlify.toml", "_redirects", "vercel.json", ".github/workflows/*.yml")
foreach ($deployFile in $frontendDeployFiles) {
    $deployPath = Join-Path $FrontendPath $deployFile
    if (Test-Path $deployPath) {
        $deploymentConfigs += "FRONTEND DEPLOY - $deployFile"
        $deploymentConfigs += "=" * 60
        $deploymentConfigs += Get-Content $deployPath -Raw -ErrorAction SilentlyContinue
        $deploymentConfigs += "`n`n"
    }
}

# Backend deployment (Render, Heroku, etc.)
$backendDeployFiles = @("render.yaml", "Procfile", "Dockerfile", ".github/workflows/*.yml")
foreach ($deployFile in $backendDeployFiles) {
    $deployPath = Join-Path $BackendPath $deployFile
    if (Test-Path $deployPath) {
        $deploymentConfigs += "BACKEND DEPLOY - $deployFile"
        $deploymentConfigs += "=" * 60
        $deploymentConfigs += Get-Content $deployPath -Raw -ErrorAction SilentlyContinue
        $deploymentConfigs += "`n`n"
    }
}

Write-Section "CONFIGURACIONES DE DESPLIEGUE" ($deploymentConfigs -join "`n") "20_CONFIGURACIONES_DESPLIEGUE.md"

# ===================================================================
# 7. AN√ÅLISIS DE APIs Y ENDPOINTS
# ===================================================================

Write-Host "`nüîå Analizando APIs y endpoints..." -ForegroundColor Yellow

$apiAnalysis = @()

# Buscar definiciones de endpoints en el backend
$backendFiles = Get-ChildItem -Path $BackendPath -Filter "*.js" -Recurse | Get-Content -Raw

# Extraer rutas REST
$routes = $backendFiles | Select-String -Pattern "app\.(get|post|put|delete|patch)\s*\(['\`"]([^'\`"]+)" -AllMatches | 
    ForEach-Object { 
        $_.Matches | ForEach-Object { 
            "$($_.Groups[1].Value.ToUpper()) $($_.Groups[2].Value)" 
        }
    } | Sort-Object | Get-Unique

$apiAnalysis += "ENDPOINTS DETECTADOS:"
$apiAnalysis += "=" * 60
$apiAnalysis += $routes -join "`n"
$apiAnalysis += "`n`n"

Write-Section "AN√ÅLISIS DE APIS Y ENDPOINTS" ($apiAnalysis -join "`n") "21_ANALISIS_APIS.md"

# ===================================================================
# 8. RESUMEN EJECUTIVO
# ===================================================================

Write-Host "`nüìä Generando resumen ejecutivo..." -ForegroundColor Yellow

$executiveSummary = @"
RESUMEN EJECUTIVO - PROYECTO SUPERCASA

ARQUITECTURA DETECTADA:
- Frontend: React.js en supercasa-admin ($FrontendPath)
- Backend: Node.js/Express en supercasa-backend ($BackendPath)
- Base de datos: PostgreSQL (esquemas extra√≠dos)
- Despliegue: Netlify (frontend) + Render (backend)

ESTRUCTURA DE PROYECTOS:
- FRONTEND (supercasa-admin): React + Tailwind CSS + React Router
- BACKEND (supercasa-backend): Node.js + Express + PostgreSQL + JWT + APIs

COMPONENTES PRINCIPALES IDENTIFICADOS:
- Sistema de autenticaci√≥n sin contrase√±as
- Integraci√≥n WhatsApp Business API (Twilio)
- Pasarela de pagos WOMPI
- Panel administrativo
- Sistema de pedidos y gesti√≥n de stock
- Bot autom√°tico 24/7

ARCHIVOS EXTRA√çDOS Y DOCUMENTADOS:
- Configuraciones de proyecto (package.json, dependencias)
- C√≥digo fuente completo (componentes, rutas, controladores)
- Esquemas de base de datos y migraciones
- Configuraciones de despliegue
- Documentaci√≥n existente
- An√°lisis de APIs y endpoints

TECNOLOG√çAS DETECTADAS:
- React Router, Tailwind CSS
- Express.js, PostgreSQL
- JWT Authentication
- WhatsApp Business API
- WOMPI Payment Gateway
- Netlify, Render hosting

RUTAS ANALIZADAS:
- Frontend completo: $FrontendPath
- Backend completo: $BackendPath

PR√ìXIMOS PASOS RECOMENDADOS:
1. Revisar toda la documentaci√≥n extra√≠da
2. Validar que no falte informaci√≥n cr√≠tica
3. Crear diagramas de arquitectura basados en el c√≥digo
4. Documentar flujos de negocio espec√≠ficos
5. Crear gu√≠as de despliegue y mantenimiento

Fecha de an√°lisis: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Total de archivos analizados: Se han extra√≠do todos los archivos relevantes de ambos proyectos separados
"@

Write-Section "RESUMEN EJECUTIVO" $executiveSummary "00_RESUMEN_EJECUTIVO.md"

# ===================================================================
# 9. √çNDICE DE ARCHIVOS GENERADOS
# ===================================================================

$indexContent = @"
√çNDICE DE DOCUMENTACI√ìN SUPERCASA

Los siguientes archivos han sido generados con toda la informaci√≥n del proyecto:

00_RESUMEN_EJECUTIVO.md - Resumen general del proyecto
01_INFORMACION_GENERAL.md - Informaci√≥n b√°sica del proyecto
02_FRONTEND_ESTRUCTURA.md - Estructura de directorios del frontend
03_FRONTEND_DEPENDENCIAS.md - Package.json y dependencias del frontend
04_FRONTEND_CONFIGURACIONES.md - Archivos de configuraci√≥n principales
05_FRONTEND_COMPONENTES_JSX.md - Todos los componentes React JSX
06_FRONTEND_COMPONENTES_JS.md - Todos los componentes JavaScript
07_FRONTEND_ESTILOS.md - Archivos CSS y estilos
08_FRONTEND_CONFIGS_ADICIONALES.md - Configuraciones adicionales (Tailwind, etc.)
09_BACKEND_ESTRUCTURA.md - Estructura de directorios del backend
10_BACKEND_DEPENDENCIAS.md - Package.json y dependencias del backend
11_BACKEND_SERVIDOR.md - Archivo principal del servidor
12_BACKEND_RUTAS.md - Todas las rutas y APIs
13_BACKEND_CONTROLADORES.md - Controladores del backend
14_BACKEND_MODELOS.md - Modelos de base de datos
15_BACKEND_MIDDLEWARES.md - Middlewares del servidor
16_BACKEND_UTILS.md - Utilidades y helpers
17_BACKEND_CONFIGURACIONES.md - Configuraciones del backend
18_BASE_DATOS_ESQUEMAS.md - Esquemas y migraciones de base de datos
19_DOCUMENTACION_EXISTENTE.md - Documentaci√≥n ya existente en los proyectos
20_CONFIGURACIONES_DESPLIEGUE.md - Configuraciones de Netlify, Render, etc.
21_ANALISIS_APIS.md - An√°lisis de endpoints y APIs detectadas

TOTAL: 22 archivos de documentaci√≥n completa del proyecto SuperCasa
"@

Write-Section "√çNDICE DE DOCUMENTACI√ìN" $indexContent "INDEX.md"

# ===================================================================
# FINALIZACI√ìN
# ===================================================================

Write-Host "`nüéâ ¬°DOCUMENTACI√ìN COMPLETA EXTRA√çDA!" -ForegroundColor Green
Write-Host "üé® Frontend analizado: $FrontendPath" -ForegroundColor Yellow
Write-Host "‚öôÔ∏è Backend analizado: $BackendPath" -ForegroundColor Yellow
Write-Host "üìÅ Documentaci√≥n en: $OutputPath" -ForegroundColor Cyan
Write-Host "üìÑ Total de archivos: 22 documentos generados" -ForegroundColor Cyan
Write-Host "`n‚úÖ El proyecto SuperCasa ha sido completamente documentado" -ForegroundColor Green
Write-Host "‚úÖ No se ha dejado nada por fuera - Frontend, Backend, APIs, DB, Deploy" -ForegroundColor Green
Write-Host "`nüöÄ Puedes usar esta documentaci√≥n para:" -ForegroundColor White
Write-Host "   - An√°lisis completo del proyecto" -ForegroundColor Gray
Write-Host "   - Migraci√≥n o refactoring" -ForegroundColor Gray
Write-Host "   - Documentaci√≥n t√©cnica" -ForegroundColor Gray
Write-Host "   - Onboarding de nuevos desarrolladores" -ForegroundColor Gray
Write-Host "   - Auditor√≠as de c√≥digo" -ForegroundColor Gray
Write-Host "`nüí° PARA EJECUTAR NUEVAMENTE:" -ForegroundColor Cyan
Write-Host "   Solo ejecuta: .\SuperCasa_Extractor.ps1" -ForegroundColor White
Write-Host "   (Rutas fijas configuradas para tus proyectos supercasa-admin y supercasa-backend)" -ForegroundColor Gray